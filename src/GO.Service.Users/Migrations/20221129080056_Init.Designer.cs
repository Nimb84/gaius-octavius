// <auto-generated />
using System;
using GO.Service.Users;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GO.Service.Users.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20221129080056_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GO.Service.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ArchivedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ArchivedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("LockedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("LockedEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Roles")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("936da01f-9abd-4d9d-80c7-02af85c822a8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2022, 11, 29, 8, 0, 56, 126, DateTimeKind.Unspecified).AddTicks(8558), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Dmytro",
                            LastName = "😇",
                            Roles = (byte)2
                        });
                });

            modelBuilder.Entity("GO.Service.Users.Entities.UserConnection", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("CurrentScope")
                        .HasColumnType("int");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "Type");

                    b.ToTable("UserConnection", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("936da01f-9abd-4d9d-80c7-02af85c822a8"),
                            Type = 1,
                            CurrentScope = 2,
                            ExternalId = "428296956",
                            Nickname = "Nimb84"
                        });
                });

            modelBuilder.Entity("GO.Service.Users.Entities.UserConnection", b =>
                {
                    b.HasOne("GO.Service.Users.Entities.User", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GO.Service.Users.Entities.User", b =>
                {
                    b.Navigation("Connections");
                });
#pragma warning restore 612, 618
        }
    }
}
